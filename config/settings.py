"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
"""
Django settings for config project.
"""

from pathlib import Path
import os

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-fmm$38k42sunz6b0#_40y!5r#icg0hng18y)zwjt7_$g3j6em=')

# Detect Railway environment
IS_RAILWAY = 'RAILWAY' in os.environ or 'DATABASE_URL' in os.environ

DEBUG = not IS_RAILWAY  # Auto-disable debug on Railway

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.railway.app',
    '.up.railway.app',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'countries',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# DATABASE CONFIGURATION - CRITICAL FIX
if IS_RAILWAY:
    # FORCE POSTGRESQL ON RAILWAY - NO FALLBACK TO SQLITE
    print("RAILWAY ENVIRONMENT DETECTED - CONFIGURING POSTGRESQL")
    
    # Method 1: Use DATABASE_URL with dj-database-url
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        try:
            import dj_database_url
            DATABASES = {
                'default': dj_database_url.parse(database_url, conn_max_age=600)
            }
            print("SUCCESS: Using PostgreSQL via DATABASE_URL")
        except Exception as e:
            print(f"ERROR with DATABASE_URL: {e}")
            # Continue to method 2
    
    # Method 2: Use individual PostgreSQL environment variables
    if 'DATABASES' not in locals() or not DATABASES.get('default'):
        pg_host = os.getenv('PGHOST')
        pg_database = os.getenv('PGDATABASE')
        pg_user = os.getenv('PGUSER')
        pg_password = os.getenv('PGPASSWORD')
        
        if all([pg_host, pg_database, pg_user, pg_password]):
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': pg_database,
                    'USER': pg_user,
                    'PASSWORD': pg_password,
                    'HOST': pg_host,
                    'PORT': os.getenv('PGPORT', '5432'),
                }
            }
            print(f"SUCCESS: Using PostgreSQL with individual env vars - Host: {pg_host}")
        else:
            # If we can't configure PostgreSQL, raise an error instead of falling back to SQLite
            missing_vars = []
            if not pg_host: missing_vars.append('PGHOST')
            if not pg_database: missing_vars.append('PGDATABASE')
            if not pg_user: missing_vars.append('PGUSER')
            if not pg_password: missing_vars.append('PGPASSWORD')
            
            error_msg = f"PostgreSQL configuration incomplete. Missing: {', '.join(missing_vars)}"
            print(f"CRITICAL ERROR: {error_msg}")
            
            # Create a minimal PostgreSQL config that will fail gracefully
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': 'railway',
                    'USER': 'postgres',
                    'PASSWORD': '',
                    'HOST': 'localhost',
                    'PORT': '5432',
                }
            }
            print("WARNING: Using placeholder PostgreSQL config - migrations may fail")

else:
    # LOCAL DEVELOPMENT - USE SQLITE
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    print("LOCAL DEVELOPMENT: Using SQLite")

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CACHE_DIR = os.path.join(BASE_DIR, 'cache')
os.makedirs(CACHE_DIR, exist_ok=True)

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True